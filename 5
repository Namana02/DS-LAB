#include <stdio.h>
#include <stdlib.h>
#include <ctype.h>
#include <math.h>
#include <string.h>
#define SIZE 50 /* Size of Stack */
int stack[SIZE];
int top = -1;
void push(int elem)
{
stack[++top]=elem;
}
int pop()
{
return(stack[top--]);
}
/*
1. Input is postfix expression as string
2. Push operands until the operator
3. evaluate exp with this operator and operands on the stack
4. Push the result on to the stack
*/
void suffix()
{
char exp[50];
char ch;
printf("Enter suffix exression:");
scanf("%s", exp);
for (int i=0; exp[i]; i++)
{
ch = exp[i];
switch(ch)
{
case '+':
push(pop()+pop());
break;
case '-':
push(pop()-pop());
break;
case '*':
push(pop()*pop());
break;
case '/':
push(pop()/pop());
break;
case '%':
push(pop()%pop());
break;
case '^': push(pow(pop(), pop()));
break;
default:
push(ch
-'0'); /* Push the operand */
}}
printf("Result: %d, top=%d
\
n\n", pop(), top);
}
/*
1. Inputs are number of disks and 3 pegs 'b', 'a', and 'e'
2. Base case when n = 1, move b
-> e
3. when n=2, b
-> e, b
-> a, a
-> e
*/
void toh(int n, char beg, char aux, char end) {
if(n == 1) {
printf("%c --> %c
\n", beg, end);
return; }
toh(n
-1, beg, end, aux);
toh(1, beg, aux, end);
toh(n
-1, aux, beg, end);
}
void tower() {
int n;
printf("Enter number of disks: ");
scanf("%d", &n);
toh(n, 'b', 'a', 'e'); }
/*
1. Evaluate postfix expression one or more times
2. Stop evaluation when the expressio is '.'
3. Solve tower of hanoi until the number diskes is 0
*/
int main() {
int choice;
struct MENU {
char *name; void (*func)();
} menu[] = {
{"Done", exit },
{"Suffix", suffix},
{"Tower", tower }
};
int size = sizeof(menu)/sizeof(menu[0]);
for(;;) {
printf("
\
n-------Array Menu-------
\n");
for(int i=1; i < size; i++) {
printf("%d. %s
\n", i, menu[i].name);
}
printf("---------------------------------
\n");
printf("Enter your choice: ");
scanf("%d", &choice);
menu[choice].func(); }
return 0; }
