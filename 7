Queue */
2. #include <stdio.h>
3. #include <stdlib.h>
4. #define MAXSIZE 5
5. int cq[MAXSIZE] = {0, 0, 0, 0, 0};
6. int front = 0, rear = 0;
7. /*
8. 1. Read the item
9. 2. Check if the queue is full i.e r+1 = f
10. 3. increment as r = r+1 % MAXSIZE
11. 4. Add the item
12. */
13. void insert()
14. {
15. int item;
16. printf("Enter item: ");
17. scanf("%d", &item);
18. if ((rear + 1) %MAXSIZE == front)
19. {
20. printf("Circular queue is full.\n");
21. return;
22. }
23. rear = (rear+1) % MAXSIZE;
24. cq[rear] = item;
25. }
26. /*
27. 1. Check if queue is empty i.e f = r
28. 2. Increment front as f = f+1 % MAXSIZE
29. */
30. void delete()
31. {
32. int item;
33. if (rear == front)
34. {
35. printf("Circular queue is empty.\n");
36. return;
37. }
38. front = (front + 1) % MAXSIZE;
39. item = cq[front];
40. }
41. /*
42. 1. Print the items from f+1 to r
43. */
44. void display()
Data Structures Lab REVA University
45. {
46. int n;
47. printf("front = %d, rear = %d, Queue = ", front, rear);
48. int i=front;
49. for(;;)
50. {
51. if (i == rear) break;
52. i = (i+1) % MAXSIZE;
53. printf("%d ", cq[i]);
54. }
55. printf("\n");
56. }
57. int main( )
58. {
59. int choice;
60. struct MENU
61. {
62. char *name; void (*func)();
63. } menu[] = {
64. {"Done", exit},
65. {"Insert", insert},
66. {"Delete", delete},
67. {"Display", display}
68. };
69. int size = sizeof(menu)/sizeof(menu[0]);
70. for(;;)
71. {
72. printf("\n-------CQ Menu-------\n");
73. for(int i=1; i < size; i++)
74. {
75. printf("%d. %s\n", i, menu[i].name);
76. }
77. printf("---------------------------------\n");
78. printf("Enter your choice: ");
79. scanf("%d", &choice);
80. menu[choice].func();
81. ⁠}
82. ⁠}
